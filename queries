-- update (CRUD) random examples for each table
-- update movie rating for a specific movie
UPDATE Movie 
SET AudienceRec = "R"
WHERE Title = 'Zion';

-- update the actor's name if there's a change
UPDATE Actor 
SET Actor1 = 'Adam Sandler' 
WHERE ActorID = 'A1';

-- update director name if there's a change
UPDATE Director 
SET Director = 'Denis Villeneuve' 
WHERE DirectorID = 'D1';

-- update genre name if there's a reclassification
UPDATE Genre 
SET Genre = 'Sci-Fi' 
WHERE GenreID = 'G10';

#Return movie title from specific year
select M.Title as "Movies Made in 2020"
from Movie as M
where M.ReleaseYear = 2020;

#Return movie title with specific actor
select M.Title as "Movies with Adam Sandler"
from Movie as M
join Actor as A on M.MovieID = A.MovieID
where A.Actor1 = 'Adam Sandler' 
   or A.Actor2 = 'Adam Sandler' 
   or A.Actor3 = 'Adam Sandler';

#Return movie with highest rating in each genre
select M.Title, G.Genre, max(M.MovieRating) as MovieRating
from Movie as M
join Genre as G on M.MovieID = G.MovieID
group by G.Genre;

#Return movies that share a director
select M.Title, D.Director
from Movie as M, Director as D
where M.MovieID = D.MovieID and D.Director in (
	select D.Director
    from Director as D
    join Movie as M on M.MovieID = D.MovieID
    group by D.Director
    having count(M.MovieID) > 1
);

#Return oldest movies from each audience recommendation
select M.Title, M.AudienceRec, M.ReleaseYear
from Movie as M
where M.ReleaseYear = (
    select MIN(ReleaseYear)
    from Movie
    where AudienceRec = M.AudienceRec
)
order by M.AudienceRec asc;

-- max and min (newest and oldest movies)
SELECT Title, ReleaseYear
FROM Movie
WHERE ReleaseYear = (SELECT MIN(ReleaseYear) FROM Movie)
   OR ReleaseYear = (SELECT MAX(ReleaseYear) FROM Movie);
   
-- directors with the highest avg movie ratings   
SELECT D.Director, ROUND(AVG(M.MovieRating), 2) AS AvgRating, COUNT(M.MovieID) AS MovieCount
FROM Movie M
JOIN Director D ON M.MovieID = D.MovieID
GROUP BY D.Director
HAVING COUNT(M.MovieID) >= 2
ORDER BY AvgRating DESC
LIMIT 10;

-- most frequent actor in the database
SELECT ActorName, COUNT(*) AS MovieCount
FROM (
    SELECT A.Actor1 AS ActorName
    FROM Movie M
    JOIN Actor A ON M.MovieID = A.MovieID
    UNION ALL
    SELECT A.Actor2
    FROM Movie M
    JOIN Actor A ON M.MovieID = A.MovieID
    UNION ALL
    SELECT A.Actor3
    FROM Movie M
    JOIN Actor A ON M.MovieID = A.MovieID
) AS AllActors
WHERE ActorName IS NOT NULL
GROUP BY ActorName
ORDER BY MovieCount DESC
LIMIT 1;

-- actors in the most high-rated movies
SELECT A.Actor1, A.Actor2, A.Actor3, M.Title, M.MovieRating
FROM Movie M
JOIN Actor A ON M.MovieID = A.MovieID
WHERE M.MovieRating > 7.0
ORDER BY M.MovieRating DESC
LIMIT 10;

-- most popular genre among highly rated movies
SELECT G.Genre, COUNT(M.MovieID) AS HighRatedCount
FROM Movie M
JOIN Genre G ON M.MovieID = G.MovieID
WHERE M.MovieRating > 8.0
GROUP BY G.Genre
ORDER BY HighRatedCount DESC
LIMIT 10;

-- Return movies with specific Genre
SELECT M.Title
FROM Movie M
JOIN Genre G ON M.MovieID = G.MovieID
WHERE G.Genre = 'Comedy'
ORDER BY M.Title;

-- Return movies that were released from a specifc year and later (ordered in ascending order from oldest to newest release on or after 2000) (NOTE: to order it in descending order just change ASC to DESC)
SELECT M.Title, M.ReleaseYear
FROM Movie M
WHERE ReleaseYear >= 2000
ORDER BY ReleaseYear ASC;

-- Return all the info on a specific movieID (left join, nested query) 
SELECT
   M.MovieID, M.Title, M.ReleaseYear, M.MovieRating, M.AudienceRec,
   A.Actor1, A.Actor2, A.Actor3,
   D.Director,
   G.Genre
FROM Movie M
LEFT JOIN Actor A ON M.MovieID = A.MovieID
LEFT JOIN Director D ON M.MovieID = D.MovieID
LEFT JOIN Genre G ON M.MovieID = G.MovieID
WHERE M.MovieID =(
  SELECT MovieID
  FROM Movie
  WHERE MovieID = 11
);

-- Return movies with a specific MovieRating and above (example will be with <= 5.0) and with a specific audience rec(TV-MA)
SELECT M.Title, M.ReleaseYear, M.MovieRating, M.AudienceRec
FROM Movie M
WHERE M.MovieRating >= 5.0 AND M.AudienceRec = 'TV-MA'
ORDER BY M.MovieRating DESC;


-- Return movies that were released before a specicif year and with a specific genre and audienceRec
SELECT M.Title, M.ReleaseYear, M.MovieRating, M.AudienceRec, G.Genre
FROM Movie M
JOIN Genre G ON M.MovieID = G.MovieID
WHERE M.MovieID IN (
  SELECT M2.MovieID
  FROM Movie M2
  JOIN Genre G2 ON M2.MovieID = G2.MovieID
  WHERE M2.ReleaseYear > 2010
    AND M2.AudienceRec = 'R'
    AND G2.Genre = 'Comedy'
)
ORDER BY M.ReleaseYear ASC;

#and then this would be in the query: (creates a delte cascade that deletes all references to that movie)
DELETE FROM Movie WHERE MovieID = 10;

    
